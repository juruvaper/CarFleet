// <auto-generated />
using System;
using System.Collections.Generic;
using CarFleetIO.Infrastructure.EF.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarFleetIO.Infrastructure.Migrations
{
    [DbContext(typeof(WriteDbContext))]
    [Migration("20250509200833_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarFleetIO.Domain.Entities.AdministrationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("Username");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.Property<long>("SecurityNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("SecurityNumber");

                    b.Property<DateOnly>("_birthDate")
                        .HasColumnType("date")
                        .HasColumnName("BirthDate");

                    b.Property<string>("_gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Gender");

                    b.Property<DateOnly>("_hireDate")
                        .HasColumnType("date")
                        .HasColumnName("HireDate");

                    b.Property<string>("_lastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("LastName");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<Guid>("_office")
                        .HasColumnType("uuid")
                        .HasColumnName("Office");

                    b.HasKey("Id");

                    b.HasIndex("_office");

                    b.ToTable("AdministrationUser");
                });

            modelBuilder.Entity("CarFleetIO.Domain.Entities.Car", b =>
                {
                    b.Property<string>("Vin")
                        .HasColumnType("text")
                        .HasColumnName("VIN");

                    b.Property<float>("EngineSize")
                        .HasColumnType("real");

                    b.Property<int>("Fuel")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDriveable")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDriveable");

                    b.Property<Guid?>("LeasedIn")
                        .HasColumnType("uuid");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("LicensePlate");

                    b.Property<Guid>("PrimaryLocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("PrimaryLocationId");

                    b.Property<string>("PrimaryUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PrimaryUserId");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.Property<string>("_make")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Make");

                    b.Property<int>("_mileage")
                        .HasColumnType("integer")
                        .HasColumnName("Mileage");

                    b.Property<string>("_model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Model");

                    b.Property<int>("_power")
                        .HasColumnType("integer")
                        .HasColumnName("Power");

                    b.Property<int>("_seats")
                        .HasColumnType("integer")
                        .HasColumnName("Seats");

                    b.HasKey("Vin");

                    b.HasIndex("LeasedIn");

                    b.HasIndex("PrimaryLocationId");

                    b.HasIndex("PrimaryUserId");

                    b.ToTable("Cars", (string)null);
                });

            modelBuilder.Entity("CarFleetIO.Domain.Entities.Leasing", b =>
                {
                    b.Property<Guid>("LeaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("PersonResponsibleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PersonResponsibleId");

                    b.HasKey("LeaseId");

                    b.HasIndex("PersonResponsibleId");

                    b.ToTable("Leasing");
                });

            modelBuilder.Entity("CarFleetIO.Domain.Entities.Localization", b =>
                {
                    b.Property<Guid>("LocalizationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("LocalizationId");

                    b.Property<string>("_city")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("City");

                    b.Property<string>("_country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Country");

                    b.HasKey("LocalizationID");

                    b.ToTable("Localizations");

                    b.HasData(
                        new
                        {
                            LocalizationID = new Guid("3f5a8f1e-2b3c-4a6d-9e2f-7d3b2c1a5f01"),
                            _city = "New York",
                            _country = "USA"
                        },
                        new
                        {
                            LocalizationID = new Guid("d9a6e7b4-1c3d-42f5-a8b7-9c3d2f5a6e12"),
                            _city = "Los Angeles",
                            _country = "USA"
                        },
                        new
                        {
                            LocalizationID = new Guid("b2d3e5f6-78c9-41e2-91a3-3a5c1e2d4f83"),
                            _city = "Chicago",
                            _country = "USA"
                        },
                        new
                        {
                            LocalizationID = new Guid("a5e3c1b2-6f79-4d8e-a1c4-5f2e3b7a9d74"),
                            _city = "Miami",
                            _country = "USA"
                        },
                        new
                        {
                            LocalizationID = new Guid("e2f5a6c3-9d1b-4e3f-81a7-7b6d4c2f1a95"),
                            _city = "San Francisco",
                            _country = "USA"
                        },
                        new
                        {
                            LocalizationID = new Guid("91a7d6c3-2f1b-4e5c-a3d2-8c7b6a5f4e03"),
                            _city = "London",
                            _country = "UK"
                        },
                        new
                        {
                            LocalizationID = new Guid("7c9b5a3e-d2f1-41e6-9a3c-2b4d5f6a8e16"),
                            _city = "Manchester",
                            _country = "UK"
                        },
                        new
                        {
                            LocalizationID = new Guid("6a5d4c3b-1f9e-44a7-82d3-5e4f1c2b7a19"),
                            _city = "Birmingham",
                            _country = "UK"
                        },
                        new
                        {
                            LocalizationID = new Guid("5f2e3d1b-9a7c-4c8e-b6d2-1a3f4e7b5c28"),
                            _city = "Sydney",
                            _country = "Australia"
                        },
                        new
                        {
                            LocalizationID = new Guid("c3d2e1f4-7b5a-4a6c-9d8e-2f1b3a5c6e37"),
                            _city = "Melbourne",
                            _country = "Australia"
                        },
                        new
                        {
                            LocalizationID = new Guid("2e4f1b3d-8a7c-43c6-9e1f-5a6b7d2c1a46"),
                            _city = "Paris",
                            _country = "France"
                        },
                        new
                        {
                            LocalizationID = new Guid("8f1e3a7b-2d4c-4c9a-8e6d-3f5b1a2c7e55"),
                            _city = "Berlin",
                            _country = "Germany"
                        },
                        new
                        {
                            LocalizationID = new Guid("1b3d5a6f-7e4c-44d9-a2b1-6c3f8e7a9d64"),
                            _city = "Madrid",
                            _country = "Spain"
                        },
                        new
                        {
                            LocalizationID = new Guid("4e7b6d2c-3a1f-49e8-b5a2-7c8d9e1f3a73"),
                            _city = "Rome",
                            _country = "Italy"
                        },
                        new
                        {
                            LocalizationID = new Guid("9e1f3a6d-5b2c-43d8-8a7c-1b6f4e5a7c82"),
                            _city = "Toronto",
                            _country = "Canada"
                        });
                });

            modelBuilder.Entity("CarFleetIO.Domain.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarIdentifier")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CarIdentifier");

                    b.Property<string>("UserIdentifier")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("UserIdentifier");

                    b.Property<string>("_destinationCity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DestinationCity");

                    b.Property<bool>("_finished")
                        .HasColumnType("boolean")
                        .HasColumnName("Finished");

                    b.Property<string>("_startCity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("StartCity");

                    b.ComplexProperty<Dictionary<string, object>>("ReservationDates", "CarFleetIO.Domain.Entities.Reservation.ReservationDates#ReservationDates", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateOnly>("EndDate")
                                .HasColumnType("date");

                            b1.Property<DateOnly>("StartDate")
                                .HasColumnType("date");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CarIdentifier");

                    b.HasIndex("UserIdentifier");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("CarFleetIO.Domain.Entities.TripReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReservationOrigin")
                        .HasColumnType("uuid");

                    b.Property<int>("_distance")
                        .HasColumnType("integer")
                        .HasColumnName("Distance");

                    b.Property<float>("_fuelConsumed")
                        .HasColumnType("real")
                        .HasColumnName("FuelConsumed");

                    b.HasKey("Id");

                    b.HasIndex("ReservationOrigin");

                    b.ToTable("TripReport");
                });

            modelBuilder.Entity("CarFleetIO.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("Username");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.Property<Guid>("Office")
                        .HasColumnType("uuid");

                    b.Property<long>("SecurityNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("SecurityNumber");

                    b.Property<DateOnly>("_birthDate")
                        .HasColumnType("date")
                        .HasColumnName("BirthDate");

                    b.Property<string>("_gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Gender");

                    b.Property<DateOnly>("_hireDate")
                        .HasColumnType("date")
                        .HasColumnName("HireDate");

                    b.Property<string>("_lastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("LastName");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("Office");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CarFleetIO.Domain.Entities.AdministrationUser", b =>
                {
                    b.HasOne("CarFleetIO.Domain.Entities.Localization", null)
                        .WithMany()
                        .HasForeignKey("_office")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarFleetIO.Domain.Entities.Car", b =>
                {
                    b.HasOne("CarFleetIO.Domain.Entities.Leasing", null)
                        .WithMany()
                        .HasForeignKey("LeasedIn");

                    b.HasOne("CarFleetIO.Domain.Entities.Localization", null)
                        .WithMany()
                        .HasForeignKey("PrimaryLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarFleetIO.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("PrimaryUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarFleetIO.Domain.Entities.Leasing", b =>
                {
                    b.HasOne("CarFleetIO.Domain.Entities.AdministrationUser", null)
                        .WithMany()
                        .HasForeignKey("PersonResponsibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarFleetIO.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("CarFleetIO.Domain.Entities.Car", null)
                        .WithMany()
                        .HasForeignKey("CarIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarFleetIO.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarFleetIO.Domain.Entities.TripReport", b =>
                {
                    b.HasOne("CarFleetIO.Domain.Entities.Reservation", null)
                        .WithMany()
                        .HasForeignKey("ReservationOrigin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("CarFleetIO.Domain.ValueObjects.Defect", "Failures", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<Guid>("TripReportId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("_carStop")
                                .HasColumnType("boolean")
                                .HasColumnName("CarStop");

                            b1.Property<int>("_severity")
                                .HasColumnType("integer")
                                .HasColumnName("Severity");

                            b1.HasKey("Id");

                            b1.HasIndex("TripReportId");

                            b1.ToTable("Defect");

                            b1.WithOwner()
                                .HasForeignKey("TripReportId");
                        });

                    b.Navigation("Failures");
                });

            modelBuilder.Entity("CarFleetIO.Domain.Entities.User", b =>
                {
                    b.HasOne("CarFleetIO.Domain.Entities.Localization", null)
                        .WithMany()
                        .HasForeignKey("Office")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
